spring:
  profiles: information_schema

table: |
  select * from (
    select t.table_schema as "schema"
         , t.table_name as "table"
      from information_schema.tables t
     where lower(t.table_schema) like '!{@schema}'
       and lower(t.table_name) like '!{@table}')

table.create: |
  create table !{schema}.!{table} (
    <#list srv.get("column") as c>
      !{c.name?right_pad(32)} !{c.getProp("data_type")}!{c.getProp("length")}<#sep>,
  </#list>);

table.drop: |
  drop table !{schema}.!{table};


table.column: |
  select * from (
    select c.table_schema as "schema"
         , c.table_name as "table"
         , c.column_name as "column"
         , c.type_name as "@data_type"
         , case when c.type_name like 'VARCHAR%' then '('|| c.character_maximum_length ||')' end as "@length"
         , c.nullable as "@nullable"
         , c.column_default as "@column_default"
    from information_schema.columns c
   where lower(c.table_schema) like '!{@schema}'
     and lower(c.table_name) like '!{@table}'
     and lower(c.column_name) like '!{@column}'
   order by c.ordinal_position asc)


---
spring:
  profiles: postgres


table: |
  select t.table_schema as "schema"
       , t.table_name as "table"
    from information_schema.tables t
   where lower(t.table_schema) like '!{@schema}'
     and lower(t.table_name) like '!{@table}'

table.create: |
  create table !{schema}.!{table} (
  <#list srv.get("column") as column>
    !{column.name?right_pad(32)} !{column.getProperty("data_type")}!{column.getProperty("length")}<#sep>,
  </#list>);

table.drop: |
  drop table !{schema}.!{table};

table.column: |
  select c.table_schema as "schema"
       , c.table_name as "table"
       , c.column_name as "column"
       , c.udt_name as "@data_type"
       , case when c.udt_name like 'varchar%' then '('|| c.character_maximum_length ||')' end as "@length"
       , c.is_nullable as "@is_nullable"
       , c.column_default as "@column_default"
    from information_schema.columns c
   where lower(c.table_schema) like '!{@schema}'
     and lower(c.table_name) like '!{@table}'
     and lower(c.column_name) like '!{@column}'
   order by c.ordinal_position asc